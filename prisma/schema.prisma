// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  projects  Project[]
}

model Project {
  id        String   @id @default(uuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  topic     String
  status    ProjectStatus @default(PLANNED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  beats           Beat[]
  styleBibles     StyleBible[]
  assets          Asset[]
  frames          Frame[]
  cues            Cue[]
  jobs            Job[]
  progressEntries ProgressEntry[]
}

model Beat {
  id            String @id @default(uuid())
  projectId     String
  project       Project @relation(fields: [projectId], references: [id])
  index         Int
  summary       String
  onScreenText  String?
  plannedFrames Int?
  durationS     Float?
  
  frames Frame[]
  
  @@unique([projectId, index])
}

model StyleBible {
  id        String @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  json      Json
}

model Asset {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  type      AssetType
  label     String
  r2Key     String
  bytes     BigInt
  checksum  String?
  meta      Json?
  createdAt DateTime  @default(now())
}

model Frame {
  id        String      @id @default(uuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id])
  beatId    String?
  beat      Beat?       @relation(fields: [beatId], references: [id])
  index     Int
  status    FrameStatus @default(NEW)
  r2Key     String?
  meta      Json?
  
  cues Cue[]
  
  @@unique([projectId, beatId, index])
}

model Cue {
  id            String  @id @default(uuid())
  projectId     String
  project       Project @relation(fields: [projectId], references: [id])
  frameId       String?
  frame         Frame?  @relation(fields: [frameId], references: [id])
  startS        Float
  endS          Float
  onScreenText  String?
  transitionIn  String?
  transitionOut String?
  meta          Json?
}

model Job {
  id         String    @id @default(uuid())
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id])
  kind       String
  status     JobStatus @default(PENDING)
  logs       Json?
  startedAt  DateTime?
  finishedAt DateTime?
}

model ProgressEntry {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  phase     String
  status    String
  notes     String?
  createdAt DateTime @default(now())
}

enum ProjectStatus {
  PLANNED
  NARRATED
  ALIGNED
  CUES_READY
  FRAMES_READY
  ASSEMBLED
}

enum AssetType {
  AUDIO
  ALIGN
  FRAME
  CUE
  VIDEO
  DOC
}

enum FrameStatus {
  NEW
  GENERATED
  APPROVED
  REPAIR_NEEDED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
